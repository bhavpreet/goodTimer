syntax = "v1"

info (
	title: "GoodTimer"
	desc: // TODO: add description
	author: "Bhavpreet Singh"
	email: "bhavpreet@gmail.com"
)

type AddRoundRequest {
	Name string `json:"name"`
}

type Round {
	ID        string `json:"id" storm:"id,unique"`
	Name      string `json:"name" storm:"unique"`
	Status    string `json:"status,options=RUNNING|FINISHED"`
	ISCurrent bool   `json:"is_current"`
}

type Bib {
	ID             string `json:"id" storm:"id,unique"`
	No             string `json:"no" storm:"unique"`
	ParentRoundID  string `json:"-" storm:"index"`
	Round          Round  `json:"round"`
	Status         string `json:"status,options=RUNNING|FINISHED"`
	ISCurrentStart bool   `json:"is_current_start"`
	ISCurrentEnd   bool   `json:"is_current_end"`

	// TIME
	StartTimes []string `json:"start_times"`
	StartTime  string   `json:"start_time"`
	ST         string   `json:"st"`
	EndTimes   []string `json:"end_times"`
	EndTime    string   `json:"end_time"`
	Duration   string   `json:"duration"`
}

type Current {
	ID              string `json:"id"`
	CurrentRound    string `json:"current_round"`
	CurrentStartBib string `json:"current_start_bib"`
	CurrentEndBib   string `json:"current_end_bib"`
}

type ListRoundsResp {
	Rounds []Round `json:"rounds"`
}

type GetRoundRequest {
	ID string `path:"id"`
}

type UpdateRoundRequest {
	ID   string `path:"round"`
	Name string `json:"name"`
}

type UpdateBibRequest {
	Round     string `path:"round"`
	ID        string `path:"id"`
	BibNo     string `json:"bib_no"`
	StartTime string `json:"start_time"`
	EndTime   string `json:"end_time"`
}

type DeleteRoundRequest {
	Round string `path:"round"`
}

type AddBibRequest {
	Round string `path:"round"`
	Bib   string `json:"bib"`
}

type GetBibRequest {
	Round string `path:"round"`
	Bib   string `path:"bib"`
}

type DeleteBibRequest {
	Round string `path:"round"`
	ID    string `path:"id"`
}

type SetRoundCurrentRequest {
	Round string `path:"round"`
}

type SetBibStatusRequest {
	Round  string `path:"round"`
	Status string `path:"status" json:"status,options=RUNNING|FINISHED"`
}

type SetBibCurrentReq {
	Round string `path:"round"`
	Bib   string `path:"bib"`
}

type ListBibsReq {
	Round string `path:"round"`
}

type ListBibsResp {
	Bibs []Bib `json:"bibs"`
}

type GetCurrentRoundResp {
	CurrentRound string `json:"current_round"`
}

service goodTimer-api {
	@handler AddRound
	post /round(AddRoundRequest) returns(Round)
	
	@handler ListRounds
	get /rounds returns(ListRoundsResp)
	
	@handler DeleteRound
	delete /round/:round(DeleteRoundRequest)
	
	@handler SetRoundCurrent
	patch /round/:round/setCurrent(SetRoundCurrentRequest)
	
	@handler UpdateRound
	patch /round/:round(UpdateRoundRequest) returns(Round)
	
	@handler GetCurrent
	get /round/getCurrent returns(Current)
	
	@handler AddBib
	post /round/:round/bib(AddBibRequest) returns(Bib)
	
	@handler GetBib
	get /round/:round/bib/:bib(GetBibRequest) returns(Bib)
	
	@handler ListBibs
	get /round/:round/bibs(ListBibsReq) returns(ListBibsResp)
	
	@handler UpdateBib
	patch /round/:round/bib/:id(UpdateBibRequest) returns(Bib)
	
	@handler DeleteBib
	delete /round/:round/bib/:bib(DeleteBibRequest)
	
	@handler SetBibStatus
	patch /round/:round/bib/:bib/setStatus(SetBibStatusRequest)
	
	@handler SetBibCurrentStart
	patch /round/:round/bib/:bib/setCurrentStart(SetBibCurrentReq)
	
	@handler SetBibCurrentEnd
	patch /round/:round/bib/:bib/setCurrentEnd(SetBibCurrentReq)
}